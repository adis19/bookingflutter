import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:weather/weather.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'api_service.dart';
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';

class WeatherService {
  late final String _apiKey;
  late final WeatherFactory _weatherFactory;
  final ApiService _apiService = ApiService();
  
  // –ö—ç—à –¥–ª—è –ø–æ–≥–æ–¥—ã –ë–∏—à–∫–µ–∫–∞
  Weather? _bishkekWeatherCache;
  DateTime? _bishkekWeatherCacheTime;
  
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë–∏—à–∫–µ–∫–∞
  final double _bishkekLat = 42.8746;
  final double _bishkekLon = 74.5698;
  final String _bishkekName = '–ë–∏—à–∫–µ–∫';
  
  // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
  final bool useBackend = true; // –¢–µ–ø–µ—Ä—å —ç–Ω–¥–ø–æ–∏–Ω—Ç –≥–æ—Ç–æ–≤, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ç–∫–µ–Ω–¥
  
  // OpenWeatherMap API –∫–ª—é—á
  final String _openWeatherMapApiKey = 'f5cb0b965ea1364904a12bd98d0adae1';
  // Google Places API –∫–ª—é—á
  final String _googlePlacesApiKey = 'D3zvlHL8F0ocFEASyCum3bPgDEk=';
  
  WeatherService() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á OpenWeatherMap
    _apiKey = _openWeatherMapApiKey;
    try {
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (dotenv.isInitialized && dotenv.env.containsKey('WEATHER_API_KEY')) {
        final envKey = dotenv.env['WEATHER_API_KEY'];
        if (envKey != null && envKey.isNotEmpty) {
          _apiKey = envKey;
          debugPrint('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á –ø–æ–≥–æ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞');
        }
      }
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ API –∫–ª—é—á–∞ –∏–∑ .env —Ñ–∞–π–ª–∞: $e');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WeatherFactory
    _weatherFactory = WeatherFactory(_apiKey, language: Language.RUSSIAN);
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞
    _prefetchBishkekWeather();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  Future<Position?> getCurrentLocation() async {
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        debugPrint('–°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        return null;
      }

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          debugPrint('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
          return null;
        }
      }
      
      if (permission == LocationPermission.deniedForever) {
        debugPrint('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞');
        return null;
      }
      
      // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: const Duration(seconds: 10)
      );
      
      return position;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: $e');
      return null;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  Future<String?> getCityFromCoordinates(double latitude, double longitude) async {
    try {
      List<Placemark> placemarks = await placemarkFromCoordinates(
        latitude, 
        longitude,
        localeIdentifier: 'ru_RU'
      );
      
      if (placemarks.isNotEmpty) {
        final place = placemarks.first;
        final locality = place.locality;
        final adminArea = place.administrativeArea;
        
        if (locality != null && locality.isNotEmpty) {
          return locality;
        } else if (adminArea != null && adminArea.isNotEmpty) {
          return adminArea;
        }
      }
      
      return null;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: $e');
      return null;
    }
  }
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞
  Future<void> _prefetchBishkekWeather() async {
    try {
      final bishkekWeather = await getWeatherByCity(_bishkekName);
      _bishkekWeatherCache = bishkekWeather;
      _bishkekWeatherCacheTime = DateTime.now();
      debugPrint('–ü–æ–≥–æ–¥–∞ –¥–ª—è –ë–∏—à–∫–µ–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞: $e');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫—ç—à (–Ω–µ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
  bool _isCacheValid() {
    if (_bishkekWeatherCache == null || _bishkekWeatherCacheTime == null) {
      return false;
    }
    
    final difference = DateTime.now().difference(_bishkekWeatherCacheTime!);
    return difference.inMinutes < 30;
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
  Future<Weather> _getWeatherFromBackend(String cityName, {double? latitude, double? longitude}) async {
    try {
      final queryParams = <String, dynamic>{};
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å
      if (latitude != null && longitude != null) {
        queryParams['lat'] = latitude.toString();
        queryParams['lon'] = longitude.toString();
      } else if (cityName.isNotEmpty) {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        queryParams['city'] = cityName;
      }
      
      debugPrint('üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ –¥–ª—è ${cityName.isNotEmpty ? cityName : "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç $latitude, $longitude"}');
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        final response = await _apiService.get('/weather', queryParameters: queryParams);
        debugPrint('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞: ${response.toString().substring(0, min(100, response.toString().length))}...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (response is Map && 
            response.containsKey('weather') && 
            response.containsKey('main') && 
            response.containsKey('name')) {
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
          final locationName = response['name'] as String? ?? cityName;
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map<dynamic, dynamic> –≤ Map<String, dynamic>
          final weatherData = <String, dynamic>{};
          response.forEach((key, value) {
            if (key is String) {
              weatherData[key] = value;
            }
          });
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Weather —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          return Weather(weatherData);
        } else {
          throw Exception('–û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
        }
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥: $e');
        debugPrint('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenWeatherMap API');
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
        if (latitude != null && longitude != null) {
          return await _getWeatherFromOpenWeatherMap(latitude: latitude, longitude: longitude);
        } else {
          return await _getWeatherFromOpenWeatherMap(cityName: cityName);
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: $e');
      
      // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return _createFallbackWeather();
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞–ø—Ä—è–º—É—é –æ—Ç OpenWeatherMap
  Future<Weather> _getWeatherFromOpenWeatherMap({String? cityName, double? latitude, double? longitude}) async {
    try {
      debugPrint('üåê –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenWeatherMap API');
      
      if (latitude != null && longitude != null) {
        final weather = await _weatherFactory.currentWeatherByLocation(latitude, longitude);
        debugPrint('‚úÖ –ü–æ–≥–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç OpenWeatherMap');
        return weather;
      } else if (cityName != null && cityName.isNotEmpty) {
        final weather = await _weatherFactory.currentWeatherByCityName(cityName);
        debugPrint('‚úÖ –ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ $cityName –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç OpenWeatherMap');
        return weather;
      } else {
        // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–∏ –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–∏—à–∫–µ–∫
        final weather = await _weatherFactory.currentWeatherByCityName(_bishkekName);
        debugPrint('‚úÖ –ü–æ–≥–æ–¥–∞ –¥–ª—è –ë–∏—à–∫–µ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç OpenWeatherMap (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)');
      return weather;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeatherMap: $e');
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ë–∏—à–∫–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞
      if ((cityName == null || cityName != _bishkekName) && 
          (latitude == null || longitude == null || 
           (latitude - _bishkekLat).abs() > 0.1 || 
           (longitude - _bishkekLon).abs() > 0.1)) {
        return await _getWeatherFromOpenWeatherMap(cityName: _bishkekName);
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return _createFallbackWeather();
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ WeatherAPI.com –≤ —Ñ–æ—Ä–º–∞—Ç OpenWeatherMap
  Map<String, dynamic> _convertWeatherApiToOpenWeatherMap(Map<String, dynamic> weatherApiData) {
    final current = weatherApiData['current'] ?? {};
    final location = weatherApiData['location'] ?? {};
    final condition = current['condition'] ?? {};
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –ø–æ–≥–æ–¥—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∏–∫–æ–Ω–∫—É
    final conditionText = condition['text'] ?? '';
    final isDay = current['is_day'] == 1;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenWeatherMap
    return {
      'coord': {
        'lon': location['lon'] ?? 0.0,
        'lat': location['lat'] ?? 0.0
      },
      'weather': [
        {
          'id': 800, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è—Å–Ω–æ
          'main': 'Clear',
          'description': conditionText.toLowerCase(),
          'icon': isDay ? '01d' : '01n' // –ë–∞–∑–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞
        }
      ],
      'base': 'stations',
      'main': {
        'temp': current['temp_c'] ?? 0.0,
        'feels_like': current['feelslike_c'] ?? 0.0,
        'temp_min': (current['temp_c'] ?? 0.0) - 1.0,
        'temp_max': (current['temp_c'] ?? 0.0) + 1.0,
        'pressure': current['pressure_mb'] ?? 1013.0,
        'humidity': current['humidity'] ?? 0
      },
      'visibility': (current['vis_km'] ?? 10.0) * 1000,
      'wind': {
        'speed': (current['wind_kph'] ?? 0.0) / 3.6, // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–º/—á –≤ –º/—Å
        'deg': current['wind_degree'] ?? 0
      },
      'clouds': {
        'all': current['cloud'] ?? 0
      },
      'dt': DateTime.now().millisecondsSinceEpoch ~/ 1000,
      'sys': {
        'country': location['country'] ?? '',
        'sunrise': DateTime.now().subtract(const Duration(hours: 6)).millisecondsSinceEpoch ~/ 1000,
        'sunset': DateTime.now().add(const Duration(hours: 6)).millisecondsSinceEpoch ~/ 1000
      },
      'timezone': 0,
      'id': 0,
      'name': location['name'] ?? 'Unknown',
      'cod': 200
    };
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
  Future<Weather> getWeatherByCity(String cityName) async {
    if (cityName.isEmpty) {
      cityName = _bishkekName;
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ë–∏—à–∫–µ–∫ –∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (cityName.toLowerCase() == _bishkekName.toLowerCase() && _isCacheValid()) {
      debugPrint('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞');
      return _bishkekWeatherCache!;
    }
    
    try {
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ç–∫–µ–Ω–¥
      if (useBackend) {
        return await _getWeatherFromBackend(cityName);
      }
      
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
      return await _getWeatherFromOpenWeatherMap(cityName: cityName);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ $cityName: $e');
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –Ω–µ –ë–∏—à–∫–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞
      if (cityName.toLowerCase() != _bishkekName.toLowerCase()) {
        debugPrint('–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞ –≤–º–µ—Å—Ç–æ $cityName');
        return getWeatherByCity(_bishkekName);
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à (–¥–∞–∂–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (_bishkekWeatherCache != null) {
        debugPrint('–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞');
        return _bishkekWeatherCache!;
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      return _createFallbackWeather();
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  Future<Weather> getWeatherByLocation(double latitude, double longitude) async {
    try {
      // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–∏–∑–∫–∏ –∫ –ë–∏—à–∫–µ–∫—É –∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (_isNearBishkek(latitude, longitude) && _isCacheValid()) {
        debugPrint('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–∏–∑–∫–∏ –∫ –ë–∏—à–∫–µ–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–≥–æ–¥—É');
        return _bishkekWeatherCache!;
      }
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ç–∫–µ–Ω–¥
      if (useBackend) {
        return await _getWeatherFromBackend(_bishkekName, latitude: latitude, longitude: longitude);
    }
      
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
      return await _getWeatherFromOpenWeatherMap(latitude: latitude, longitude: longitude);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: $e');
      return getBishkekWeather();
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞ (—Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º)
  Future<Weather> getBishkekWeather() async {
    try {
      return await getWeatherByCity(_bishkekName);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞: $e');
      
      try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        return await getWeatherByLocation(_bishkekLat, _bishkekLon);
      } catch (e2) {
        debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: $e2');
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à (–¥–∞–∂–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (_bishkekWeatherCache != null) {
          debugPrint('–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –ë–∏—à–∫–µ–∫–∞');
          return _bishkekWeatherCache!;
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return _createFallbackWeather();
      }
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞
  Weather _createFallbackWeather() {
    debugPrint('–°–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è –ë–∏—à–∫–µ–∫–∞');
    
    // –°–æ–∑–¥–∞–µ–º Map —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
    final Map<String, dynamic> weatherData = {
      'name': _bishkekName,
      'main': {
        'temp': 299.15, // 26¬∞C –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (273.15 + 26 = 299.15)
        'humidity': 50,
      },
      'weather': [
        {
          'id': 803, // –û–±–ª–∞—á–Ω–æ (–∫–æ–¥ –º–µ–∂–¥—É 801-804 –¥–ª—è —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏)
          'main': 'Clouds',
          'description': '–û–±–ª–∞—á–Ω–æ',
          'icon': '03d'
        }
      ],
      'wind': {
        'speed': 2.0,
        'deg': 0
      },
      'dt': DateTime.now().millisecondsSinceEpoch ~/ 1000,
      'sys': {
        'sunrise': DateTime.now().subtract(const Duration(hours: 6)).millisecondsSinceEpoch ~/ 1000,
        'sunset': DateTime.now().add(const Duration(hours: 6)).millisecondsSinceEpoch ~/ 1000
      },
      'clouds': {
        'all': 75 // 75% –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
      }
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π Map
    return Weather(weatherData);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä—è–¥–æ–º —Å –ë–∏—à–∫–µ–∫–æ–º
  bool _isNearBishkek(double latitude, double longitude) {
    return (latitude - _bishkekLat).abs() < 0.1 && (longitude - _bishkekLon).abs() < 0.1;
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
  String getWeatherIcon(int conditionCode) {
    // –ö–æ–¥—ã WeatherCondition –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ weather
    if (conditionCode >= 200 && conditionCode < 300) {
      return '‚õàÔ∏è'; // –ì—Ä–æ–∑–∞
    } else if (conditionCode >= 300 && conditionCode < 400) {
      return 'üåßÔ∏è'; // –ú–æ—Ä–æ—Å—å
    } else if (conditionCode >= 500 && conditionCode < 600) {
      return 'üåßÔ∏è'; // –î–æ–∂–¥—å
    } else if (conditionCode >= 600 && conditionCode < 700) {
      return '‚ùÑÔ∏è'; // –°–Ω–µ–≥
    } else if (conditionCode >= 700 && conditionCode < 800) {
      return 'üå´Ô∏è'; // –¢—É–º–∞–Ω
    } else if (conditionCode == 800) {
      return '‚òÄÔ∏è'; // –Ø—Å–Ω–æ
    } else if (conditionCode > 800 && conditionCode < 900) {
      return '‚òÅÔ∏è'; // –û–±–ª–∞—á–Ω–æ
    } else {
      return 'üå°Ô∏è'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
  String getWeatherDescription(int conditionCode) {
    if (conditionCode >= 200 && conditionCode < 300) {
      return '–ì—Ä–æ–∑–∞';
    } else if (conditionCode >= 300 && conditionCode < 400) {
      return '–ú–æ—Ä–æ—Å—å';
    } else if (conditionCode >= 500 && conditionCode < 600) {
      return '–î–æ–∂–¥—å';
    } else if (conditionCode >= 600 && conditionCode < 700) {
      return '–°–Ω–µ–≥';
    } else if (conditionCode >= 700 && conditionCode < 800) {
      return '–¢—É–º–∞–Ω';
    } else if (conditionCode == 800) {
      return '–Ø—Å–Ω–æ';
    } else if (conditionCode > 800 && conditionCode < 900) {
      return '–û–±–ª–∞—á–Ω–æ';
    } else {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }
}

// Helper function
int min(int a, int b) {
  return a < b ? a : b;
} 